#!env node

const axios = require('axios')
const app = require('../lib/app')
const config = {
  port: 3001
};

(async function() {
  await app.listen(config.port);
  await Promise.all([{
    messages: [{
      author: 'miriam@gmail.com',
      name: 'miriam',
      creation: 1602174660000,
      content: `
      ## 1 - Architecture - Level easy

      It is now the right time to re-organize/refactor our code. Split this
      monolithic react Component into multiple section. In the end, we should end
      up with the following components: 'Header', 'Footer', 'Main', 'Channels',
      'Channel', 'Messages', 'MessageSend':
      `.replace(/^ {6}/gm,''),
    },{
      author: 'herduinpierre@yahoo.com',
      name: 'pierre',
      creation: 1602174720000,
      content: `
      ## 2 - Styles - Level easy

      Give it some styles, use CSS to make it looks good. Possible source of
      improvements include changing the colors, replacing the HTML "send" button
      with an icon, working on the header, providing day/night themes ... be creative
      `.replace(/^ {6}/gm,''),
    },{
      author: 'miriam@gmail.com',
      name: 'miriam',
      creation: 1602174780000,
      content: `
      ## 3 - Use an external library - Level medium

      Format the date in a human readable format. While the date is generated on
      the server side to ensure its relevance and prevent from forgery, it must be
      displayed according to the user browser local. The
      [Moment.js](https://momentjs.com/) library has been the library of choice
      for many years to accomplish date formatting. Read what is displayed on the
      top right corner of their homepage, it is now depreciated. Read the reasons
      and act accordingly.
      `.replace(/^ {6}/gm,''),
    },{
      author: 'herduinpierre@yahoo.com',
      name: 'pierre',
      creation: 1602231540000,
      content: `
      ## 4 - Support message contents in Markdown - Level hard

      Markdown is the most popular syntax to format text into HTML. It is used
      by the majority of the project Readme files, to write documentation and to
      generate websites.

      I recommand you to use the [unified](https://unifiedjs.com/) which is very
      powerful and comes with a lot of plugins. You can read the Markdown to HTML
      guide in the learn section and enrich it with your selection of relevant
      plugins.

      Consider adding syntax highlight support with a library like
      [Prism](https://prismjs.com/).
      `.replace(/^ {6}/gm,'').replace(/^ {6}/gm,''),
    }],
    members: [
      "herduinpierre@yahoo.com"
    ],
    creator: "herduinpierre@yahoo.com",
    name: "Courses"
  },{
    messages: [{
      author: 'miriam@gmail.com',
      name: 'miriam',
      creation: 1602231900000,
      content: `
      Ping
      `.replace(/^ {6}/gm,'')
    },{
      author: 'pierre@yahoo.com',
      name: 'pierre',
      creation: 1602232020000,
      content: `
      Pong
      `.replace(/^ {6}/gm,'')
    }],
    members: [
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "Solo"
  },{
    messages: [{
      author: 'herduinpierre@yahoo.com',
      name: 'pierre herduin',
      creation: 1602232200000,
      content: `
      What is the answer to the Ultimate Question of Life, the Universe and Everything ?
      `.replace(/^ {6}/gm,'')
    },{
      author: 'pierre@yahoo.com',
      name: 'pierre',
      creation: 1602232260000,
      content: `
      42
      `.replace(/^ {6}/gm,'')
    }],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "Our little group"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel1"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel2"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel3"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel4"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel5"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel6"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel7"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel8"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel9"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel10"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel11"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel12"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel13"
  }, {
    messages: [],
    members: [
      "herduinpierre@yahoo.com",
      "pierre@yahoo.com"
    ],
    creator: "pierre@yahoo.com",
    name: "channel14"
  }].map( async (channel) => {
    const {data: {id}} = await axios.post(`http://localhost:${config.port}/channels`, {}, {
      params: {
        email: channel.creator,
        channel: {
          name: channel.name,
          members: channel.members,
        },
      },
    })
    return Promise.all( channel.messages.map( async (message) => {
      await axios.post(`http://localhost:${config.port}/channels/${id}/messages`, message)
    }))
  }))

  await Promise.all([
    {
      email: "pierre@yahoo.com",
      firstname: "Pierre",
      lastname: "Herduin",
      password: "1aXWa5To2gz2PUzW1mzUideOd7aXA5xsSOP_jYF1ITk",
      type: "no-oauth",
    },
    {
      email: "jeantintin@gmail.com",
      firstname: "Jean",
      lastname: "Tintin",
      password: "RsI1o1UPdMxMBXt_MMH1PTvncTlwQsNFzwMolRIUMX4",
      type: "no-oauth",
    },
    {
      email: "donald@trump.com",
      firstname: "Donald",
      lastname: "Trump",
      password: "QTjPvF028x6K4J70BEu4jAycbyiaahwnszWpnR2NyG8",
      type: "no-oauth",
    },
    {
      email: "tintin@milou.com",
      firstname: "Jean",
      lastname: "Tintin",
      password: "Ne1lsesuhwhujX6gFU6I13_ruPxTrzB_KlQ7LUR2ffA",
      type: "no-oauth",
    },
    {
      email: "miriambenallou@edu.ece.fr",
      firstname: "Miriam",
      lastname: "Benallou",
      password: "LSE0Y172x413g2KzBPa4usdt8c0dBy9Q6lYUWBa9MvM",
      type: "no-oauth",
    },
  ].map( async (user) => {
    await axios.post(`http://localhost:${config.port}/users`, {
      email: user.email,
      firstname: user.firstname,
      lastname: user.lastname,
      password: user.password,
      type: user.type,
    })
  }))

  process.exit()
})();
